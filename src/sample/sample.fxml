<?import javafx.scene.layout.GridPane?>
<?import javafx.scene.control.Button?>


<?import javafx.scene.control.RadioButton?>
<?import javafx.scene.control.Label?>
<GridPane fx:controller="sample.Controller"
          xmlns:fx="http://javafx.com/fxml" alignment="center" hgap="10" vgap="10"
          stylesheets="@styles.css">
    <Button text="Button One" GridPane.rowIndex="0" GridPane.columnIndex="0"/>
    <Button text="Button Two" GridPane.rowIndex="0" GridPane.columnIndex="1"/>
    <Button text="Button Three" id="button_three" GridPane.rowIndex="0" GridPane.columnIndex="2"/>
    <Button fx:id="button4" text="Button Four" GridPane.rowIndex="0" GridPane.columnIndex="3"/>
    <Button text="Button Five" GridPane.rowIndex="0" GridPane.columnIndex="4"/>

    <RadioButton text="Choice 1" GridPane.rowIndex="1" GridPane.columnIndex="0"/>

    <Label text="JavaFX Effects" fx:id="label" GridPane.rowIndex="1" GridPane.columnIndex="1"
    rotate="90" onMouseEntered="#handleMouseEnter" onMouseExited="#handleMouseExit"/>


</GridPane>


<!--We can change the button's text color by using the textFill property is it extends from Labeled class...but we can do the same using CSS as well-->


<!--When css is included within the fxml in the control element(in line) then it takes precedence over the css in the style sheet...similar to overriding  -->
<!--However, css in line is not recommended-->

<!--id is different than fx:id-->

<!--JavaFX CSS documentation: https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html-->